---
import Select from "../components/Select.astro";
import ButtonAction from "./ButtonAction.astro";
import { apiController } from '../scripts/request.js';

interface Props {
    subTitle?: string;
    isSearchBar?: boolean;
}

let formattedClientes = [];
let clientes = [];

const cliente_id = Astro.url.searchParams.get('c');

const ispage = Astro.url.pathname == '/dashboard/home';
const notPage = Astro.url.pathname == '/dashboard/reportes';

const ocultar = ispage ? 'hidden' : '';

const {subTitle = '', isSearchBar = true} = Astro.props;

const locals:any = Astro.locals;

if(cliente_id && locals.rol_id == 1 || locals.rol_id == 2 ){
  const responseData = await apiController(import.meta.env.PUBLIC_BASE_URL,'/clientes','GET',null,locals.token);
  const clientes = Array.isArray(responseData.data) ? responseData.data : [];
  formattedClientes = clientes.map(cliente => ({
    value: cliente.id,
    label: cliente.nombre_cliente
  }));

  if(cliente_id){
    var nombreCliente = formattedClientes.find(function(cliente) {
        return cliente.value == cliente_id;
    }).label;
  }
}

let errors = {all: [] };
let successMessage = {all: []};


---



<div class="bg-gradient-to-r from-custom-Tredenary to-custom-Quattuordenary p-6 pb-24 no-imprimir">
  { nombreCliente && 
    <h2 class="text-white font-semibold">{nombreCliente}</h2>
  }

  {(ispage && !notPage || cliente_id && !notPage) && 
    <form id="formSearchBar" method="GET" action={"/dashboard/clientes/dashboardSearch"}>
      
        {ispage && 
          <div class="flex items-center justify-center">
            <h2 class="text-3xl font-semibold mb-4 text-center text-white mr-4">Seleccione el contribuyente</h2>
            <div>
              <Select
                    id="clienteSelect"
                    name="c"
                    rounded="rounded-full"
                    addClass=""
                    addClassSelect="clienteSelect"
                    placeholder="Seleccionar Cliente"
                    iconSize={35}
                    options={formattedClientes}
                />
            </div>
          </div>
        }
        
          <div class=`contentConsultasCliente flex items-center justify-center ${ocultar}`>
            <h2 class="text-3xl font-semibold mb-4 text-center text-white mr-4">{subTitle}</h2>
            <div>
              <Select
                    id="tipoBusqueda"
                    name="tipoBusqueda"
                    rounded="rounded-full"
                    addClass=""
                    addClassSelect="tipoBusqueda"
                    placeholder="Seleccionar"
                    iconSize={35}
                />
            </div>
          </div>
          <div class="contentConsultas flex flex-col md:flex-row items-center justify-center hidden">
            <div class="flex contentConsultasInput">

            </div>
              {isSearchBar &&
                  <ButtonAction id="ButtonActionSearch" text="Buscar" addClass="ml-2 py-3 px-8 mt-4 sm:mt-0"/>
              }
          </div>
        
          
          {(!ispage) && 
            <input type="text" name="c" value={cliente_id} hidden>
          }
    </form>
  }

  {((!cliente_id && !ispage) || notPage) &&
    <div class="mt-14"></div>
  }
</div>

<script>
  import { obtenerCookie, getQueryParam, getAllQueryParams, setElementValueByName, handleSelectChange, procesarConsulta } from "../scripts/utils.js";
  import { apiController } from '../scripts/request.js';

  let cookies = obtenerCookie('others');
  let objeto = JSON.parse(cookies);

  // Obtener cliente_id de la query inicial
  let cliente_id:any = getQueryParam('c');

  // Ejecutar procesarDatos inicialmente con los parámetros actuales
  procesarConsulta(cliente_id, cookies, objeto);

  // Obtener referencia al elemento <select> por su ID
  const clienteSelect = document.getElementById('clienteSelect');

  // Agregar event listener para detectar cambios en el <select>
  if(clienteSelect){
    clienteSelect.addEventListener('change', function() {
      // Obtener el nuevo valor seleccionado
      cliente_id = this.value;
      var contentConsultasCliente = document.querySelector('.contentConsultasCliente');
      contentConsultasCliente.classList.remove('hidden');
      // Ejecutar procesarDatos con los nuevos parámetros
      procesarConsulta(cliente_id, cookies, objeto);
    });
  }
</script>



<script>
  // Verificar si el elemento existe
  var formSearchBar = document.getElementById('formSearchBar');
  if (formSearchBar) {
      // Si el elemento existe, agregar el evento 'submit'
      formSearchBar.addEventListener('submit', function(event) {
          // Muestra la pantalla de carga
          var loadingScreen = document.getElementById('loading-screen');
          if (loadingScreen) {
              loadingScreen.classList.remove('hidden');

              // Simula una operación de búsqueda
              setTimeout(function() {
                  // Verifica nuevamente si la pantalla de carga existe antes de ocultarla
                  if (loadingScreen) {
                      loadingScreen.classList.add('hidden');
                  }
              }, 60000);
          }
      });
  }
</script>
