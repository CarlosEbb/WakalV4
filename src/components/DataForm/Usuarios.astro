---
import { Icon } from 'astro-icon/components';
import InputField from '../InputField.astro';
import Select from '../Select.astro';
import Checkbox from '../Checkbox.astro';
import ButtonAction from '../ButtonAction.astro';
import { apiController } from '../../scripts/request.js';
import { Image } from 'astro:assets';

interface Props {
    id?: string;
    method: "POST" | "PUT" | "GET";
    formData?: any;
    locals?: any;
    disabled?: boolean;
    name?: string;
}

const { id = '', method, formData = {}, locals, disabled = false, name} = Astro.props;

let textBotton = "Guardar";
let textMethod = method;
let isRequired = method == "POST";

let isSeniat = true;
let isCliente = true;
if(locals.rol_id == 1){
    isSeniat = !(formData.rol_id == 2);
    isCliente = !(formData.rol_id == 3);
}else{
    isSeniat = !(locals.rol_id == 2);
}

let ocultarValoresSelect =  true;
let mostrarImgPerfil =  false;
let disabledInputIdCliente =  false;

let transactionName = formData.id ? 'imagen-perfil-' + formData.id : undefined;

if(method == "POST"){
    textBotton = "Guardar";
    textMethod = "POST";
}
if(method == "PUT"){
    textBotton = "Actualizar"
    textMethod = "POST";
    disabledInputIdCliente = true;
}
if(method == "GET"){
    textBotton = "Actualizar"
    textMethod = "POST";
    ocultarValoresSelect =  false;
    mostrarImgPerfil =  true;
}

let data_roles = [];
let data_clientes = [];

if(locals.rol_id == 1){
  const responseDataRoles = await apiController(import.meta.env.PUBLIC_BASE_URL,'/roles','GET',null, locals.token);
  if(responseDataRoles.data.errors || responseDataRoles.code !== 200){
      
  }else{
      data_roles = responseDataRoles.data.map(item => ({
          value: item.id.toString(),
          label: item.nombre
      }));
  }

  const responseDataClientes = await apiController(import.meta.env.PUBLIC_BASE_URL,'/clientes','GET',null, locals.token);
  if(responseDataClientes.data.errors || responseDataClientes.code !== 200){
      
  }else{
      data_clientes = responseDataClientes.data.map(item => ({
          value: item.id.toString(),
          label: item.nombre_cliente
      }));
  }
}

---

<div class="absolute right-1/2 -top-12 translate-x-1/2">
    <label for="img_profile_file" data-tippy-content="Perfil" class="text-gray-600 font-medium rounded-lg text-sm text-center inline-flex items-center cursor-pointer">
    
        <div transition:name={transactionName} id="imageContainer" class="menu-trigger h-24 w-24 ml-auto rounded-full flex items-center justify-center bg-gradient-to-tr from-custom-nonary to-custom-denary text-white select-none text-4xl font-semibold">
            {mostrarImgPerfil ? (
                
                formData && (
                    formData.img_profile ? (
                        <Image src={import.meta.env.PUBLIC_BASE_URL + formData.img_profile} alt="Descripción de la imagen" width={100} height={100} class="rounded-full select-none"/>  
                    ) : (
                        <div class="menu-trigger h-24 w-24 ml-auto rounded-full flex items-center justify-center bg-gradient-to-tr from-custom-nonary to-custom-denary text-white select-none text-4xl font-semibold">
                            {(formData.nombre.charAt(0) + formData.apellido.charAt(0)).toUpperCase()}
                        </div>
                    )
                )
            ) : (
                <Icon id="icon-camera" name="camera-plus"  class="w-10 h-10" />
            )}
        </div>
    </label>
</div>
<br><br>


<form class="mx-full text-center mr-2" method={textMethod} name={name} enctype="multipart/form-data">
    <InputField id="img_profile_file" name="img_profile_file" type="file" hidden/>
    <h2 class="font-semibold text-custom-secundary text-xl mb-5">Datos Personales</h2>
    <div class="grid md:grid-cols-1">
        <div class="px-2">
            <div class="grid md:grid-cols-3 md:gap-6">
                <div class="relative z-0 w-full m-2 group">
                    <InputField disabled={disabled} isrequired={true} id="nombre" name="nombre" value={formData.nombre || ''} type="text" icon="user-circle" placeholder="Nombre" addClassInput="string"/>
                </div>
                <div class="relative z-0 w-full m-2 group">
                    <InputField disabled={disabled} isrequired={true} id="apellido" name="apellido" value={formData.apellido || ''} type="text" icon="user-circle" placeholder="Apellido" addClassInput="string"/>
                </div>
                <div class="relative z-0 w-full m-2 group">
                    <InputField disabled={disabled} isrequired={true} id="department" name="department" value={formData.department || ''} type="text" icon="hexagons" placeholder="Departamento" />
                </div>
            </div>
        </div>
        <div class="px-2">
            <div class="grid md:grid-cols-2 md:gap-6">
                <div class="relative z-0 w-full m-2 group">
                    <InputField disabled={disabled} isrequired={true} id="email" name="email" value={formData.email || ''} type="email" icon="mail" placeholder="E-mail" />
                </div>
                <div class="relative z-0 w-full m-2 group">
                    <InputField disabled={disabled} isrequired={true} id="email_alternativo" name="email_alternativo" value={formData.email_alternativo || ''} type="email" icon="mail-ai" placeholder="E-mail alternativo" />
                </div>
            </div>
        </div>
        <div class="px-2">
            <div class="grid md:grid-cols-2 md:gap-6">
                <div class="flex z-0 w-full m-2 group">
                    <div class="w-40 mr-4">
                        <Select
                            id="cod_area"
                            icon="device-sim"
                            name="cod_area"
                            rounded="rounded-full"
                            addClass=""
                            options={[
                                {value: "0424", label: "0424"},
                                {value: "0414", label: "0414"},
                                {value: "0412", label: "0412"},
                                {value: "0416", label: "0416"},
                                {value: "0426", label: "0426"},
                            ]}
                            value={formData.cod_area || ''}
                            iconSize={35}
                            disabled={disabled}
                        />
                    </div>
                    <div class="w-full">
                        <InputField disabled={disabled} isrequired={true} id="telefono" name="telefono" value={formData.telefono || ''} type="text" icon="device-mobile" placeholder="Teléfono" addClassInput="number"/>
                    </div>
                </div>
                <div class="flex z-0 w-full m-2 group">
                    <div class="w-40 mr-4">
                        <Select
                            id="prefijo_cedula"
                            icon="user-scan"
                            name="prefijo_cedula"
                            rounded="rounded-full"
                            addClass=""
                            options={[
                                {value: "V", label: "V"},
                                {value: "E", label: "E"},
                                {value: "P", label: "P"},
                                {value: "J", label: "J"},
                                {value: "G", label: "G"},
                            ]}
                            value={formData.prefijo_cedula || ''}
                            iconSize={35}
                            disabled={disabled}
                        />
                    </div>
                    <div class="w-full">
                        <InputField disabled={disabled} isrequired={true} id="cedula" name="cedula" value={formData.cedula || ''} type="text" icon="id" placeholder="Cédula" addClassInput="number" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <hr class="my-6">
    <div class="grid md:grid-cols-2">
        
       
        <div class="px-2 md:border-r">
            <h2 class="font-semibold text-custom-secundary text-xl mb-5">Datos de Usuario</h2>
            <div class="grid md:grid-cols-2 gap-5">
                <div class="relative z-0 w-full group">
                    <InputField disabled={disabled} isrequired={true} id="username" name="username" value={formData.username || ''} type="text" icon="user" placeholder="Nombre de Usuario" />
                </div>
                {locals.rol_id == 1 &&
                    <div class="relative z-0 w-full group">
                        <Select
                            id="rol_id"
                            icon="mood-search"
                            name="rol_id"
                            rounded="rounded-full"
                            addClass=""
                            options={data_roles}
                            value={formData.rol_id || ''}
                            placeholder="Roles"
                            disabled={disabled}
                            addClassSelect='rol_id'
                        />
                    </div>
                }
            
                {!disabled && 
                    <div class="relative z-0 w-full group">
                        <InputField disabled={disabled} isrequired={isRequired} id="password" name="password" value={formData.password || ''} type="password" icon="lock" placeholder="Contraseña" />
                    </div>
                
                    <div class="relative z-0 w-full group">
                        <InputField disabled={disabled} isrequired={isRequired} id="newPassword" name="newPassword" value={formData.newPassword || ''} type="password" icon="lock" placeholder="Confirmar contraseña" />
                    </div>
                }
                <div class="relative z-0 w-full group">
                    <InputField disabled={disabled} isrequired={true} id="cargo" name="cargo" value={formData.cargo || ''} type="text" icon="building-estate" placeholder="Cargo" />
                </div>
                <div class="relative z-0 w-full group">
                    
                    <button id="dropdownPermisos" data-dropdown-toggle="dropdownDefaultCheckbox" class="justify-between rounded-full text-sm py-2.5 inline-flex items-center w-full border-none text-custom-select bg-custom-quaternary select-none" type="button">
                        <span class="flex"><Icon name="certificate"  class=" left-0  pointer-events-none ml-3 text-custom-primary mr-3" />Permisos de consultas</span> 
                        <Icon name="chevron-down" size={16} stroke-width="3"  class="pointer-events-none mr-2.5 text-gray-500" />
                    </button>
                    
                    <!-- Dropdown menu -->
                    <div id="dropdownDefaultCheckbox" class="z-10 hidden w-48 bg-white divide-y divide-gray-100 rounded-lg shadow dark:bg-gray-700 dark:divide-gray-600">
                        <ul class="p-3 space-y-3 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdownPermisos">
                            <li>
                                <Checkbox add_class="mt-2" id="reportes" icon="check" text="Reportes" checked={formData.reportes === 'on' ? true : false} />
                            </li>
                            <li>
                                <Checkbox add_class="mt-2" id="metricas" icon="check" text="Métricas" checked={formData.metricas === 'on' ? true : false}/>
                            </li>
                            <li>
                                <Checkbox add_class="mt-2" id="libro_ventas" icon="check" text="Libro de ventas" checked={formData.libro_ventas === 'on' ? true : false}/>
                            </li>
                            <li>
                                <Checkbox add_class="mt-2" id="Documentos fiscales" icon="check" text="Documentos fiscales" checked={formData.documentos_fiscales === 'on' ? true : false}/>
                            </li>
                        </ul>
                    </div>

                </div>
            </div>
        </div>
        {(locals.rol_id == 1 || locals.rol_id == 2) &&
            <div class="px-2 pl-4 jurisdiccion_card" hidden={isSeniat}>
                <h2 class="font-semibold text-custom-secundary text-xl mb-5">Jurisdicción</h2>
                <div class="grid md:grid-cols-1 md:gap-3">
                    <div class="md:mr-2">
                        {!disabled &&
                            <Select 
                                id="estado"
                                icon="map"
                                name="jurisdiccion_estado"
                                rounded="rounded-full"
                                addClass="mt-4 md:mt-1.5"
                                placeholder="Estado"
                            />
                        }
                        <InputField icon="map" disabled={disabled} id="estado_temp" value={formData.jurisdiccion_estado || ''} type="text" hidden={ocultarValoresSelect} />
                    </div>
                    <div class="md:mr-2">
                        {!disabled &&
                            <Select 
                                id="region"
                                icon="map-pin-2"
                                name="jurisdiccion_region"
                                rounded="rounded-full"
                                addClass="mt-4 md:mt-1.5" disabled
                                placeholder="Región"
                            />
                        }
                        <InputField icon="map-pin-2" disabled={disabled} id="region_temp" value={formData.jurisdiccion_region || ''} type="text" hidden={ocultarValoresSelect} />
                    </div>
                    <div class="md:mr-2">
                        {!disabled &&
                            <Select
                                id="sector"
                                icon="map-pin"
                                name="jurisdiccion_sector"
                                rounded="rounded-full"
                                addClass="mt-4 md:mt-1.5" disabled
                                placeholder="Sector / Unidad"
                            />
                        }
                        <InputField icon="map-pin" disabled={disabled} id="sector_temp" value={formData.jurisdiccion_sector || ''} type="text" hidden={ocultarValoresSelect} />
                    </div>
                
                </div>
            </div>
        }

        {(locals.rol_id == 1) &&
            <div class="px-2 pl-4 cliente_card" hidden={isCliente}>
                <h2 class="font-semibold text-custom-secundary text-xl mb-5">Configuración de Cliente</h2>
                <div class="grid md:grid-cols-1 gap-5">
                    <div class="relative z-0 w-full group">
                        <Select
                            id="cliente_id"
                            icon="mood-search"
                            name="cliente_id"
                            rounded="rounded-full"
                            addClass=""
                            options={data_clientes}
                            disabled={disabled}
                            addClassSelect='cliente_config'
                            value={formData.cliente_id || ''}
                            placeholder="Selecciona el cliente al que está asociado el usuario"
                            disabled={disabledInputIdCliente}
                        />
                    </div> 
                    
                </div>
                
            </div>
        }
    </div>
    {!disabled && 
        <div class="flex justify-center mt-5">
            <ButtonAction icon="device-floppy" text={textBotton}/>
        </div>
    }
    
    
</form>

<script>
    const data = {
      "Estado1": {
        "region1": ["sector1", "sector2"],
        "region2": ["sector3", "sector4"]
      },
      "Estado2": {
        "region3": ["sector5", "sector6"],
        "region4": ["sector7", "sector8"]
      }
    };
  
    function init() {
        const estadoSelect:any = document.getElementById('estado');
        const regionSelect:any = document.getElementById('region');
        const sectorSelect:any = document.getElementById('sector');
    
        for (const estado in data) {
            const option = document.createElement('option');
            option.text = estado;
            option.value = estado;
            estadoSelect.add(option);
        }
    
        estadoSelect.onchange = function() {
            regionSelect.innerHTML = '<option value="">Región</option>';
            sectorSelect.innerHTML = '<option value="">Sector / Unidad</option>';
            regionSelect.disabled = false; // Habilitar el selector de region
            const regiones = data[this.value];
            for (const region in regiones) {
            const option = document.createElement('option');
            option.text = region;
            option.value = region;
            regionSelect.add(option);
            }
        };
    
        regionSelect.onchange = function() {
            sectorSelect.innerHTML = '<option value="">Sector / Unidad</option>';
            sectorSelect.disabled = false; // Habilitar el selector de sector
            const sectors = data[estadoSelect.value][this.value];
            for (const sector of sectors) {
            const option = document.createElement('option');
            option.text = sector;
            option.value = sector;
            sectorSelect.add(option);
            }
        };

        function selectOptions(estadoValue, regionValue, sectorValue) {
            if(estadoValue && regionValue && sectorValue){
                const estadoSelect:any = document.getElementById('estado');
                const regionSelect:any = document.getElementById('region');
                const sectorSelect:any = document.getElementById('sector');
    
                // Seleccionar el valor en el dropdown de estado
                estadoSelect.value = estadoValue;
                estadoSelect.dispatchEvent(new Event('change'));
    
                // Esperar a que se carguen las opciones de región
               
                regionSelect.value = regionValue;
                regionSelect.dispatchEvent(new Event('change'));

                // Esperar a que se carguen las opciones de sector
                
                sectorSelect.value = sectorValue;
                   
            }
        }

        const estadoSelect_temp:any = document.getElementById('estado_temp');
        const regionSelect_temp:any = document.getElementById('region_temp');
        const sectorSelect_temp:any = document.getElementById('sector_temp');

        selectOptions(estadoSelect_temp.value, regionSelect_temp.value, sectorSelect_temp.value);


        document.getElementById('img_profile_file').addEventListener('change', function(event:any) {
            var reader = new FileReader();
            reader.onload = function(){
                var output = document.getElementById('imageContainer');
                output.style.backgroundImage = 'url(' + reader.result + ')';
                output.style.backgroundSize = 'cover'; // Ajusta la imagen al tamaño del círculo
                output.style.backgroundPosition = 'center'; // Centra la imagen
                document.getElementById('icon-camera').style.visibility = 'hidden'; // Oculta el icono
            };
            reader.readAsDataURL(event.target.files[0]);
        });


        // Primero, obtén los elementos del DOM
        var select:any = document.querySelector('.rol_id');
        var card:any = document.querySelector('.jurisdiccion_card');
        var clienteCard:any = document.querySelector('.cliente_card');

        // Luego, agrega un evento de cambio al select
        select.addEventListener('change', function() {
        // Si el valor del select es 2, añade el atributo hidden a la tarjeta
            if (select.value == '2') {
                card.removeAttribute('hidden');
            } else {
                card.setAttribute('hidden', '');
            }

            if (select.value == '3') {
                clienteCard.removeAttribute('hidden');
            } else {
                clienteCard.setAttribute('hidden', '');
            }
        });


    }

    // Inicializar en la primera carga
    init();

    // Reinicializar después de cambiar de página
    document.addEventListener("astro:after-swap", init);
    
      
    
  </script>