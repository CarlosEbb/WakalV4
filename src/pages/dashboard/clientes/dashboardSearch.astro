---
import Layout from "../../../layouts/Layout.astro";

import { Icon } from "astro-icon/components";
import CardContentPage from "../../../components/CardContentPage.astro";
import { apiController } from '../../../scripts/request.js';
import { formatearNumeroControl, obtenerNumeroMes } from '../../../scripts/utils.js';
import DynamicTable from "../../../components/DynamicTable.astro";

const params = Astro.url.searchParams;

const tipoBusqueda = params.get('tipoBusqueda');
let responseData;
let dataTable = [];

const locals:any = Astro.locals;

let errors = {all: [] };
let successMessage = {all: []};

const cliente_id = Astro.url.searchParams.get('c');
responseData = await apiController(import.meta.env.PUBLIC_BASE_URL,`/consultasCliente/${cliente_id}/getDataBusqueda${Astro.url.search}`,'GET',null,locals.token);
console.log(responseData);
dataTable = Array.isArray(responseData.data) ? responseData.data : [];

if(responseData.data.errors || responseData.code !== 200){
    errors.all = responseData.data.errors ? responseData.data.errors : [];
}


---

<Layout title="Dashboard" bodyClass="bg-gray-100">
    <CardContentPage>
        <div class="flex justify-between items-center p-6">
            <div></div>
            <h1 class="text-2xl ml-8">Resultado de consulta</h1>
            <button id="download-btn">Descargar XML</button>
            <div class="flex space-x-4">
                <!-- Aquí van tus iconos -->
                <i class="icono1"><a href=""><Icon name="file-type-xml" class="text-2xl" /></a></i>
                <i class="icono2"><a href=""><Icon name="file-type-pdf" class="text-2xl" /></a></i>
                <i class="icono3"><a href=""><Icon name="file-type-csv" class="text-2xl" /></a></i>
            </div>
        </div>
    
        <div class="relative overflow-x-auto">
            <DynamicTable
            id="data-table" 
            addClassTable="tableBusqueda"
            isScroll={true}
            sizeText="text-xs"
            columnas={[
                "Actividad",
                "Nº de Control",
                "Nº de Documento",
                "Tipo de Documento",
                "Código de Operación",
                "Serie",
                "Fecha de Emisión",
                "Hora Emisión",
                "Fecha de Asig",

                
                "RIF/CI",
                
                "Total Neto a Pagar",
                "Monto IGTF",
                "Total Pagar",
                "Base Imponible IVA",
                "Monto IVA",
                "Monto Exento",
                "Monto No Sujeto",
                //"Razón Social",
                "Status",
                "Motivo Anulación",
                "Fecha y Hora Anulación",
            ]}
            >
            {dataTable.map((data, index) => (
                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                    <td hidden>{data.numero_control}</td>
                    <td>
                        <a target="_blank" href=`${import.meta.env.PUBLIC_BASE_URL}/consultas/cliente/${cliente_id}/getpdf/${data.numero_control}/${data.tipo_documento}/${data.numero_documento}/${obtenerNumeroMes(data.fecha_emision)}/${data.encrypt}?encrypt_others=${data.encrypt_others}&token=${locals.token}`>Ver PDF</a>
                    </td>
                    <td class="p-4">{formatearNumeroControl(data.numero_control)}</td>
                    <td>{data.numero_documento}</td>
                    <td>{data.tipo_documento}</td>
                    <td>{data.codigo_operacion}</td>
                    <td>{data.serie}</td>
                    <td>{data.fecha_emision}</td>
                    <td>{data.hora_emision}</td>
                    <td>{data.fecha_asignacion}</td>
                    <td>{data.rif}</td>

                    <td>{data.neto_pagar}</td>
                    <td>{data.igtf}</td>
                    <td>{data.total_pagar}</td>
                    <td>{data.base_imponible}</td>
                    <td>{data.monto_iva}</td>
                    <td>{data.monto_exento}</td>
                    <td>{data.monto_no_sujeto}</td>
                    {/* <td><p class="truncate text-xs w-52">{data.razon_social}</p> </td> */}
                    <td>{data.status !== '' ? (data.status == 0 || data.status == "false" ? "Activa" : data.status == 1 || data.status == "true" ? "Anulada" : data.status) : ''}</td>
                    <td>{data.motivo_anulacion}</td>
                    <td>{data.fecha_anulacion} {data.hora_anulacion}</td>
                    
                    
                </tr>
            ))}
        </DynamicTable>
        </div>

    </CardContentPage>


</Layout>

<script>
    import {getQueryParam} from "../../../scripts/utils.js";
    
    function buscarYResaltar(valor) {
        // Selecciona todas las filas en la tabla
        
            var filas:any = document.querySelectorAll('.tableBusqueda tr');

            // Selecciona el div que contiene la tabla
            var div:any = document.querySelector('.div_tableBusqueda');

            // Itera sobre las filas
            for (var i = 0; i < filas.length; i++) {
                // Si la fila contiene el número de control
                if (filas[i].textContent.includes(valor)) {
                    // Pinta la fila de azul
                    filas[i].style.backgroundColor = '#4e4f9d';
                    filas[i].classList.add('text-white');
                    // Enfoca la fila en el div
                    div.scrollTop = filas[i].offsetTop - div.offsetTop - div.clientHeight / 2 + filas[i].clientHeight / 2;
                }
            }
        
    }


    async function init() {
       
        
        // Selecciona todas las filas en la tabla
        let numero_control = getQueryParam('numero_control');
        let numero_documento = getQueryParam('numero_documento');

        if(numero_control){
            buscarYResaltar(Number(numero_control.replace(/-/g, '').replace(/^0+/, '')));
        }

        if(numero_documento){
            let hasLetters = /[a-zA-Z]/.test(numero_documento);
            if(hasLetters){//si contiene letras
                buscarYResaltar(numero_documento);
            }else{
                buscarYResaltar(Number(numero_documento.replace(/-/g, '').replace(/^0+/, '')));
            }
        }
    }

  // Inicializar en la primera carga
  init();

  // Reinicializar después de cambiar de página
  document.addEventListener("astro:after-swap", init);

</script>


<script>
    import {generateXML, downloadXML} from "../../../scripts/generateXML";

    
    document.getElementById('download-btn').addEventListener('click', () => {
            const table = document.getElementById('data-table');
            const data = [];
            console.log(111);
            const rows = table.querySelectorAll('tbody tr');
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                const rowData = {};
                rowData.RIFPrestador = cells[0].innerText;
                rowData.TipoDocumento = cells[1].innerText;
                rowData.NumeroDocumento = cells[2].innerText;
                rowData.FechaDocumento = cells[3].innerText;
                rowData.HoraEmision = cells[4].innerText;
                rowData.RIFCliente = cells[5].innerText;
                rowData.CodigoOperacion = cells[6].innerText;
                rowData.Precio = cells[7].innerText;
                rowData.MontoBaseImponibleIVA = cells[8].innerText;
                rowData.MontoIVA = cells[9].innerText;
                rowData.totalExento = cells[10].innerText;
                rowData.totalAPagar = cells[11].innerText;
                rowData.MontoIGTF = cells[12].innerText;
                data.push(rowData);
            });

            const xml = generateXML(data);
            console.log(xml);
            downloadXML(xml, 'clientes.xml');
        });
</script>